#!/bin/bash

source `dirname $0`/../config
source `dirname $0`/../lib/system.sh

set -e

PREFIX="/l/local"
export RBENV_ROOT="$PREFIX/rbenv"
export PATH="$RBENV_ROOT/bin:$RBENV_ROOT/shims:$PATH"

function clone {
    [ -d $1 ] && [ "$(ls -A $1)" ] && echo "$1 already present" || git clone $2
}

function _mkdir {
    if [ -e $1 ];
    then
        echo "$1 already present"
    else
        mkdir $1
        echo "made dir $1"
    fi
}

function install_ruby {
    if [ -e /$RBENV_ROOT/versions/$1 ];
    then
        echo "$1 already present"
    else
        rbenv install $1
        export RBENV_VERSION=$1
        gem install bundler
        gem install pry
        # ONLY DEV
        # pushd `dirname $0`/../lib/bundler
        # rm Gemfile.lock
        # bundle install
        # rm Gemfile.lock
        unset RBENV_VERSION
    fi
}

function check_package {
    arr=($(echo $1 | tr " " "\n"))

    for p in ${arr[@]}
    do
        if (dpkg -s $p >/dev/null 2>&1); then
            echo "OK $p found"
            return
        fi
    done

    echo "FAILURE, package not found: $1"
    exit 1
}

function check_yum {
        if (yum list installed $1 >/dev/null 2>&1); then
            echo "OK $1 found"
            return
        fi

    echo "FAILURE, package not found: $1"
    exit 1
}

if [ ! $NO_JRUBY ]; then
    if [ "$OS" == "X" ];      then export JAVA_HOME=`/usr/libexec/java_home`; fi
    if [ "$OS" == "EL" -o "$OS" == "Debian" ]; then export JAVA_HOME=`find /usr/lib/jvm -maxdepth 1 -mindepth 1 -type d | sort -r | head -1`; fi

    if [ ! -d "$JAVA_HOME" ]; then
        echo "Can't find JAVA_HOME"
        exit 1
    fi

    export PATH="${JAVA_HOME}/bin:$PATH"
fi

if [ "$OS" == "Debian" ]; then
    check_package libssl-dev
    check_package libreadline-dev
    check_package "g++"
    check_package "make"
fi

if [ "$OS" == "EL" ]; then
    check_yum readline-devel 
    check_yum openssl-devel
fi

# install rbenv
pushd $PREFIX >/dev/null
clone rbenv https://github.com/sstephenson/rbenv.git

# install plugins
cd $RBENV_ROOT
_mkdir plugins
pushd plugins >/dev/null
clone ruby-build https://github.com/sstephenson/ruby-build.git
clone rbenv-update https://github.com/rkh/rbenv-update.git
clone rbenv-aliases https://github.com/tpope/rbenv-aliases.git
popd >/dev/null
popd >/dev/null

# up to date?
rbenv update

source `dirname $0`/../lib/info.sh

# install ruby versions

if [ ! $NO_JRUBY ]; then
    install_ruby $CURRENT_JRUBY_UPSTREAM
    rbenv alias `echo $CURRENT_JRUBY_UPSTREAM | sed -e 's/\.[0-9]\.[0-9]$//g'` --auto
fi

if [ ! $NO_CRUBY ]; then
    install_ruby $CURRENT_CRUBY_UPSTREAM
fi

if [ $DEFAULT_TO_JRUBY ]; then
    rbenv global $CURRENT_JRUBY_UPSTREAM
else
    rbenv global $CURRENT_CRUBY_UPSTREAM
fi

source `dirname $0`/../lib/info.sh

# remove outdated ruby versions
for v in "${OUTDATED_CRUBIES[@]}" "${OUTDATED_JRUBIES[@]}"; do
    echo "Removing $v"
    rbenv uninstall -f $v
done

rbenv alias --auto
